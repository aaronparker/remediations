name: "Validate proactive remediations"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "**.ps1"
      - "!tests/*"
      - "!.github/*"
      - "!.vscode/*"
  pull_request:
    branches: [ "main" ]
    paths:
      - "**.ps1"
      - "!tests/*"
      - "!.github/*"
      - "!.vscode/*"

jobs:
  pester:
    name: "Test scripts with Pester"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Pester tests
        shell: powershell
        working-directory: "${{ github.workspace }}"
        run: |
          .\tests\Install-Pester.ps1
          Import-Module -Name "Pester" -Force -ErrorAction "Stop"

          # Get script paths as an array, excluding specific directories
          $Paths = Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Directory -Exclude "tests" | Select-Object -ExpandProperty "FullName"

          $Config = New-PesterConfiguration
          $Config.Run.Path = "$env:GITHUB_WORKSPACE\tests"
          $Config.Run.PassThru = $true
          $Config.CodeCoverage.Enabled = $true
          $Config.CodeCoverage.Path = $Paths
          $Config.CodeCoverage.OutputFormat = "JaCoCo"
          $Config.CodeCoverage.OutputPath = "$env:GITHUB_WORKSPACE\CodeCoverage.xml"
          $Config.Output.Verbosity = "Detailed"
          $Config.TestResult.Enabled = $true
          $Config.TestResult.OutputFormat = "NUnitXml"
          $Config.TestResult.OutputPath = "$env:GITHUB_WORKSPACE\TestResults.xml"
          Invoke-Pester -Configuration $Config

      # Upload test results
      - name: Upload Pester test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: "${{ github.workspace }}\\TestResults.xml"

      - name: Upload code coverage results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codecov-results
          path: "${{ github.workspace }}\\CodeCoverage.xml"

  publish-test-results:
    name: "Publish Tests Results"
    needs: [ "pester"]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      checks: write
      # only needed unless run with comment_mode: off
      pull-requests: write

    steps:
      - name: Download Pester Test Result Artifacts
        uses: actions/download-artifact@v5
        with:
          name: test-results
          path: test-results

      - name: Publish Pester Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          nunit_files: "test-results/**/*.xml"

      - name: Download Code Coverage Result Artifacts
        uses: actions/download-artifact@v5
        if: always()
        with:
          name: codecov-results
          path: codecov-results

      - name: Upload coverage reports to Codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${CODECOV_TOKEN} -f ./codecov-results/CodeCoverage.xml
